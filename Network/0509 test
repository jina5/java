P.43~44
정규화

(1) 이상 현상을 야기하는 함수적 종속성을 제거하기 위해 릴레이션을 작은 여러 릴레이션
으로 무손실 분해(Lossless Decomposition)하는 과정이다.
(2) 데이터 일관성 유지, 자료구조의 안정성 확보, 자료 불일치성 최소화, 데이터 중복 제거 등을 위해 실시한다.
(3) 정규화는 1차 정규화, 2차 정규화, 3차 정규화, BCNF 정규화, 4차 정규화, 5차 정규화 등이 존재한다.


에이전트(Agent)

1. 시스템, 모바일 기기, 인터넷 등에서 사용자를 대신하여 특정 목적의 작업을 수행하는 소프트 웨어이다
2. 자신의 감각기관(Sensor)을 통해 환경(Environments)을 인지(Percept)하여 작용기(Effectors)를 통해 그 환경에
대해 반응(Action) 하는 시스템이다.
3. 단순 반사형 에이전트
'조건부-결론부 관계 규칙에 의해 자신의 지식 베이스에서 인지된 상태와 정확히 일치하는 반응만을 수행한다.
4. 외부 지식 기억형 에이전트
(1)인지된 상태의 범위에 관한 내부 지식을 계속 기억한다.
(2) 인지된 상태가 지식 베이스 조건부와 정확히 일치하는 것이 없더라도 인지된 상태의 범위로부터 유사한 결론부를 탐색한다.
5. 목표 기반 에이전트
인지에 대한 반응이 목표가 주어졌을 떄 정확히 수행된다는 것을 기본 전제로 하는 에이전트로서, 탐색(Search) 문제나 계획(Planning) 문제 등에 적용한다.
6. 함수 기반 에이전트
(1) 목표 기반 에이전트가 수행할 목표들을 선택할 때 문제가 발생하기 때문에 이를 해결하기 위한 에이전트이다.
(2) 인지한 반응을 목표에 대해 얼마만크 만족하는지 수치화한다.


p.46 데이터 모델링

(1) 개념 데이터 모델링(Conceptual Data Modeling)을 수행한다.
(가) 데이터의 최상위 집합인 주제영역(Subject Area)을 정의한다.
(나) 데이터의 보관 단위인 핵심 데이터 집합을 정의한다.
(다)핵심 데이터 집합 간의 관계(외래키)를 정의한다.
(라)ER(Entity-Relationship, 개체관계) 다이어 그램, EER(Extended-ER) 다이어그램으로 표현한다.
(2) 논리 데이터 모델링(Logical Data Modeling)을 수행한다
(가) 개념 데이터 모델링에서 추출된 Entity 속성을 검증 및 확정한다.
(나) Entity에 대해 유일성을 식별할 수 있는 주 식별자를 확정한다.
(다) 이상현상을 야기하는 속성 간의 종속관계를 제거하기 위해 정규화를 수행한다.
(라) M:M 관계인 Entity의 관계를 1:M 관계로 해소한다.
(마) 개체 무결성(기본키) 및 참조 무결성(외래키) 규칙을 정의한다.
(바) ER(Entity-Relationship) 다이어그램을 검증한다.
(사) 도출된 데이터 모델이 사용자가 원하는 트랙잭션을 만족하는지 검증한다.
(3)물리 데이터 모델링(Physical Data Modeling)을 수행한다.
(가) 물리요소에 대해서 조사 및 분석을 실시한다.
(나)논리모델을 물리모델로 변환한다.
데이터가 물리적으로 컴퓨터에 어떻게 저장될 것인지를 정의하는 물리적 스키마를 생성한다.
(다) 성능 향상, 개발 및 운영의 단순화를 위해 반정규화를 실시한다.


P.49 에이전트 핵심기능

자율성(Autonomy): 에이전트는 사람이나 다른 사물의 직접적인 간섭 없이 스스로 판단하여 동작하고, 
그들의 행동이나 내부 상테에 대한 어떤 종류의 제어를 가진다 
사회성(Social Ability): 에이전트는 에이전트 통신언를 사용하여 사람과 다른 에이전트들과 상호 작용할 수 있다.
반응성(Reactivity): 에이전트는 실세계, 그래픽사용자 인터페이스를 경유한 사용자, 다른 에이전트들의 집합, 
인터넷 같은 환경을 인지하고 그 안에서 일어나는 변화에 시간상 적절히 반응한다.
능동성(Proactivity): 에이전트는 단순히 환경에 반응하여 행동하는 것이 아니라 주도권을 가지고 목표 지향적으로 행동한다.
시간연속성(Temporal Continuity): 에이전트는 단순히 한번 주어진 입력을 처리하여 결과를 보여주고 종료하는 것이 아니라, 
전면에서 실행하고 이면에서 잠시 휴식하는 연속적으로 수행하는 데몬 같은 프로세스이다
목표 지향성(Goal-orientedness): 에이전트는 복잡한 고수준 작업들을 수행한다. 
작업이 더 작은 세부작업으로 나뉘고 처리 순서가 결정되어 처리되는 등의 책임을 에이전트가 진다.
P.54~P.55 Queue 관리기술(큐 관리기술)
패킷의 입력과 출력 Queue에 대한 정책을 설정하고 제어하기 위한 기술이다.
1. 선입선출 정리
대기열(Queue) 등에서 앞에 입력된 것부터 순서적으로 처리하여 출력하는 방법이다.
복수의 호 또는 집(Job)이 처리 대기로 되어 있을 경우 처리의 우선순위를 붙이지 않고 먼저 도착한 순서대로 처리하는 방식이다.
2.우선순위 큐잉(Priority)
우선순위가 높고 중요한 패킷에 높은 우선순위를 부여하여 빠르게 처리하도록 하는 방식이다
큐는 선형 자료구조이지만, 우선순위 큐(Priority Queue)는 비선형 자료구조이다.
우선순위 큐는 들어가는 순서에 관계없이 큐에 빠져나갈 때 우선순위에 맞게 나간다.
이 떄 우선순위 큐의 우선순위는 프로그래머가 결정한다.
3.맞춤예약 큐잉(Custom Queuing)
가용 대역폭 범위 내에서 일정 비율을 특정한 프로토콜에 맞추어 사용하느 큐잉 방식을 말하며, 사전에 트래픽의 종류 및 특성을 알아야 한다.
4.WFO(Weighted Fair Queuing)
소량의 트래픽이 대량의 트래픽에 의해 손해를 보지 않도록 패킷 플로별로 서로 다른 큐를 두어 트래픽을 조절하고(공정성 측면), 
특정 기준에 따라 가중치를 정하여 같은 양의 트래픽을 가진 패킷 플로 간에서도 차별을 두는 방식(가중치 측면)을 혼합한 방식이다.

혼잡제어(Congestion Control)
통신만 혼잡 발생 시 회피 및 제어하는 기술로서 네트워크 내 대기하는 패킷 수를 줄여 혼잡을 미연에 방지하거나 제어하는 기법이다.

주요 해결 방식으로 네트워크 자원을 늘리는 방식, 네트워크 부하를 줄이는 방식, 예약기반의 혼잡제어(네트워크 쪽에다가 자원을 미리 예약하는 방식), 피드백 기반의 혼잡제어(네트워크 쪽에서 보내는 피드백 정보에 따라 속도조절) 방식등이 있다

1.RED(Random Early Detection)
폭주가 발생하기 이전에 이를 감지해서, 사전에 폭주의 가능성을 줄이기 위해 TCP등에서 채용된 방법이다.
2.WRED(Weighted Random Early Detection)
RED의 단점을 보완한 기법으로 서비스 차별성을 유지하면서도 혼잡제어가 가능한 방법이다.
혼잡 발생 시 탈락시킬 플로를 특정 기준/정책에 준하는 값에 따라 우선순위를 두고 선택하도록 하는 방법이다.


-서버용 운영체제 종류
리눅스, 유닉스(BSD, 솔라리스 등), 윈도우, macOS 등

-데이터베이스 종류(Oracle,MySQL,MariaDB,SQlite.. etc.)
-관계형 데이터베이스 (SQL)

장점
다양한 용도로 사용이 가능하고, 일반적으로 높은 성능을 보여주고 있다(범용적 / 고성능)
데이터의 일관성을 보증한다.
정규화에 따른 갱신 비용 최소화

단점
대량의 데이터 입력 처리
갱신이 발생한 테이블의 인덱스 생성 및 스키마 변경
컬럼의 확장의 어려움
단순히 빠른 결과

주요 제품 종류
Oracle / Oracle
MS-SQL Server / Microsoft
MySQL / Oracle (SunMicroSystems)
DB2 / IBM
Infomix / IBM
Sybase / Sybase
Derby / APache
SQLite / Opensource

-통합 개발 툴(Java기반, C/C++/C#기반)
visual studio - c계열
xcode - 맥os ios
이클립스 - 자바
jetbrain series - 다양한 언어 
인텔리제이 - 자바
안드로이드스튜디오 - aos

이클립스 (Eclipse)
플랫폼 - 크로스 플랫폼(자바)   
운영체제 - 윈도우, 리눅스, 솔라리스, AIX, 맥 OS X   
언어 - 자바, C, C++, PHP, JSP

안쥬타 (Anjuta)
운영체제 - 리눅스
언어 - C, C++

와이드 스튜디오 (Wide Studio)
운영체제 - 리눅스   
언어 - C, C++

코드블럭스 (Code::Blocks)
언어 - C, C++

Dev-C++
언어 - C, C++

C++빌더(C++ Builder)
언어 - C, C++

제이빌더(J Builder)
언어 - JAVA

터보 C (Turbo C)
언어 - C, C++

제이디벨로퍼(JDeveloper)
(개발사 오라클) JVM   
언어 - 자바, XML, SQL PL/SQL, HTML, 자바스크립트, BPEL, PHP

엑스코드(X Code)
언어 - C, C++, 오브젝티브-C, 오브젝티브-C++, 자바, 애플스크립트, 코코아, Carbon, GNU 파스칼, 프리 파스칼, 에이다, C#, 펄, D, Swift

코드라이트
언어 - C/C++



Git 명령어

git init : .git 하위 디렉토리 생성 (폴더를 만든 후, 그 안에서 명령 실행 => 새로운 git저장소 생성)
git add 파일명 : 커밋에 단일 파일의 변경 사항을 포함
git log : 현재 위치한 브랜치 커밋 내용 확인 및 식별자 부여됨
git status : 파일 상태 확인
git commit -M"메세지" : 커밋 생성 (실제 변경사항 확정)
git checkout  : 로컬의 변경 사항을 변경 전으로 되돌림